package {{package}}
{{imports}}
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import org.springframework.transaction.annotation.Transactional
import org.springframework.stereotype.Service

@Service
@Transactional
class {{domainClass}}Service(
    val {{domainObject}}Repository: {{domainClass}}Repository
) {

    /**
    * Create a {{domainObject}}.
    *
    * @param {{domainObject}} the entity to save
    * @return the persisted entity
    */
    fun create({{domainObject}}: {{domainClass}}): {{domainClass}} {
        if ({{domainObject}}.id > 0) {
            throw RuntimeException("No se puede crear un objecto que ya existe")
        }
        return {{domainObject}}Repository.save({{domainObject}})
    }

    /**
    * Update a {{domainObject}}.
    *
    * @param {{domainObject}} the entity to save
    * @return the persisted entity
    */
    fun update({{domainObject}}: {{domainClass}}): {{domainClass}} {
        if ({{domainObject}}.id == null || {{domainObject}}.id == 0) {
            throw RuntimeException("No se puede actualizar un objeto que no existe")
        }
        return {{domainObject}}Repository.save({{domainObject}})
    }

    /**
    *  Get one {{domainObject}} by id.
    *
    *  @param id the id of the entity
    *  @return the entity
    */
    @Transactional(readOnly = true)
    fun findOne(id: Long): {{domainClass}} {
        return {{domainObject}}Repository.findOne(id)
    }

    @Transactional(readOnly = true)
    fun findAll(pageable: Pageable): Page<{{domainClass}}>
        return {{domainObject}}Repository.findAll(pageable)

    /**
    *  Delete the {{{{domainObject}}}} by id.
    *
    *  @param id the id of the entity
    */
    fun delete(id: Long) {
        {{domainObject}}Repository.delete(id)
    }
}