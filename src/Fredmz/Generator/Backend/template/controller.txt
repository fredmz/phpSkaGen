package {{package}}
{{imports}}
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;

import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing {{domainClass}}.
 */
@RestController
@RequestMapping("{{url}}")
public class {{domainClass}}Controller(
    val {{domainObject}}Service: {{domainClass}}Service
) {
    val ENTITY_NAME: String = '{{domainObject}}'

    /**
    * POST  {{url}} : Create a new {{domainObject}}.
    *
    * @param {{domainObject}} the {{domainObject}} to create
    * @return the ResponseEntity with status 201 (Created) and with body the new {{domainObject}}, or with status 400 (Bad Request) if the {{domainObject}} has already an ID
    * @throws URISyntaxException if the Location URI syntax is incorrect
    */
    @PostMapping("")
    fun create(@Valid @RequestBody {{domainObject}}: {{domainClass}}): ResponseEntity<{{domainClass}}> {
        var result = {{domainObject}}Service.create({{domainObject}});
        return ResponseEntity.created(URI("{{url}}/" + result.id))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.id.toString()))
            .body(result);
    }

    /**
    * PUT  {{url}} : Updates an existing {{domainObject}}.
    *
    * @param {{domainObject}} the {{domainObject}} to update
    * @return the ResponseEntity with status 200 (OK) and with body the updated {{domainObject}},
    * or with status 400 (Bad Request) if the {{domainObject}} is not valid,
    * or with status 500 (Internal Server Error) if the {{domainObject}} couldnt be updated
    * @throws URISyntaxException if the Location URI syntax is incorrect
    */
    @PutMapping("")
    fun update(@Valid @RequestBody {{domainClass}} {{domainObject}}): ResponseEntity<{{domainClass}}> {
        var result = {{domainObject}}Service.update({{domainObject}});
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, {{domainObject}}.id.toString()))
            .body(result);
    }

    /**
    * GET  {{url}} : get all the {{domainObject}} objects.
    *
    * @param pageable the pagination information
    * @return the ResponseEntity with status 200 (OK) and the list of {{domainObject}} objects in body
    */
    @GetMapping("")
    fun findAll(@ApiParam Pageable pageable): ResponseEntity<List<{{domainClass}}>> {
        var page = {{domainObject}}Service.findAll(pageable);
        var headers = PaginationUtil.generatePaginationHttpHeaders(page, "{{url}}");
        return ResponseEntity<>(page.content, headers, HttpStatus.OK);
    }

    /**
    * GET  {{url}}/:id : get the "id" {{domainObject}}.
    *
    * @param id the id of the {{domainObject}} to retrieve
    * @return the ResponseEntity with status 200 (OK) and with body the {{domainObject}}, or with status 404 (Not Found)
    */
    @GetMapping("/{id}")
    public ResponseEntity<{{domainClass}}> get{{domainClass}}(@PathVariable Long id) {
        var {{domainObject}} = {{domainObject}}Service.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable({{domainObject}}));
    }

    /**
    * DELETE  {{url}}/:id : delete the "id" {{domainObject}}.
    *
    * @param id the id of the {{domainObject}} to delete
    * @return the ResponseEntity with status 200 (OK)
    */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete{{domainClass}}(@PathVariable Long id) {
        {{domainObject}}Service.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

}